AirplaneLine Abstract Data Type (ADT)
=====================================

Representation / data structure to use: Queue

Class invariant: Size of queue >= 0

Given: Airplane object; see interface Airplane.h

Publicly exposed member functions:

  // Description: Constructor
  // Postcondition: creates queue of size 1000
  AirplaneLine();

  // Description: Constructor
  // Postcondition: creates queue of size n where n >= 0
  AirplaneLine (int n);

  // Description: Puts one airplane into queue
  // Precondition: Airplane a is legitimate
  // Postcondition: Puts airplane into queue if it is not full, increase size of queue by 1
  void enqueue (Airplane a);

  // Description: Returns airplane at beginning of queue
  // Postcondition: If queue is not empty, returns airplane at beginning of queue, decrease size of queue by 1
  Airplane dequeue();

  // Description: checks if queue is empty
  // Postcondition: returns true if queue is empty, else returns false
  bool isEmpty();

  // Description: checks if queue is full
  // Postcondition: returns true if queue is full, else returns false
  bool isFull();

  // Description: provides size of current queue
  // Postcondition: returns size of current queue which is >= 0
  int getCurrentSize();

  // Description: destructor
  // Precondition: queue is defined
  // Postcondition: queue is deallocated from memory
  ~AirplaneLine();
  
Private members:
  1. The queue: to be implemented as dynamically allocated array of Airplane objects (or linked list)
  2. A counter for size of current queue: an integer
  
Example usage:
  AirplaneLine q = AirplaneLine(7); // creates a queue of size 7 of Airplane objects
  Airplane a = Airplane("777", "BOS", "LAS", "JetBlue", 300); // one Airplane object
  bool test = q.isEmpty(); // returns true
  q.enqueue(a); // adds airplane departing to Las Vegas to queue
  test = q.isEmpty(); // returns false
  test = q.isFull(); // returns false
  int currentSize = q.getCurrentSize(); // returns 1
  Airplane b = q.dequeue(); // Returns an Airplane object (in this scenario, a --see above)
  
Test cases:
  1. Dequeue an empty queue
  2. Enqueue to a full queue
  3. Create an AirplaneLine of size -1

Simulation:
===========

Data in the problem:
  1. Total number of passengers flown out of the airport
  2. Total number of passengers that arrived
  3. Total number of planes that had to circle in the air
  4. Total number of planes that had to be delayed for takeoff
  5. The planes that are still waiting to depart
  6. An activity.log file

Required abstractions: Airplane, AirplaneLine

Required code: command line argument reading, file reading

Simulation algorithm:
  1. Create counters variables (and initialize to 0) for:
     * Total number of passengers flown out of the airport
     * Total number of passengers that arrived
     * Total number of planes that had to circle in the air
     * Total number of planes that had to be delayed for takeoff
  2. Read in command line input for size of queue (n)
  3. Sanitize the command line input
  4. Create 4 instances of AirplaneLine
     * departing of size n (i.e., AirplaneLine departing = AirplaneLine(n);)
     * arriving of size n (i.e., AirplaneLine arriving = AirplaneLine(n);)
     * parked (i.e., AirplaneLine parked = AirplaneLine();)
     * circling (i.e., AirplaneLine circling = AirplaneLine();) 
  5. Open activity.log file for reading
  6. For each line in the activity file:
     - Read the "signal": {!, D, A}
     - If signal is "D"
       - Dequeue a plane from the departing queue
       - If there is a plane in the parked queue, dequeue a plane from it and put it into the departing queue
       - Add to total number of passengers flow out count
     - Else, if signal is "A"
       - Dequeue a plane from the arriving queue
       - If there is a plane in the circling queue, dequeue a plane from it and put it into the arriving queue
       - Add to total number of passengers arriving count
     - Else, if signal is "!"
       - Create an Airplane object with the plane's information
       - Determine whether it should be put in the departing or arriving queue
       - If plane cannot be put into departing or arriving queue, put it into parked or circling queue respectively, and add to total number of planes circling or delayed (for takeoff)
  7. Close file
  8. Print report of:
     * Total number of passengers flown out of the airport
     * Total number of passengers that arrived
     * Total number of planes that had to circle in the air
     * Total number of planes that had to be delayed for takeoff
     * List the planes that are still waiting to depart
     * list the planes that are still waiting to land

Test cases for simulation:
  1. Empty file
  2. File of all "A"s
  3. File of all "D"s
  4. File of all "!"s
  5. File with n lines (mixture of "A"s, "D"s, and "!"s)
  6. Non-numeric input or a number < 0 for queue size from command line
